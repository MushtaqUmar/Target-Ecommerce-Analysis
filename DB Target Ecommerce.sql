CREATE DATABASE target_ecommerce_db;
USE target_ecommerce_db;


# ======== 1. Cities where customers are located.
SELECT distinct customer_city FROM customers;

# ======== 2. Number of orders placed in 2017 (among 2016, 2017 & 2018 available sales).
SELECT YEAR(order_purchase_timestamp) AS Year, COUNT(*) AS Orders_Count
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2017
GROUP BY Year;

/*   -- == OR DIRECTY
SELECT COUNT(order_id) AS Orders_Count
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2017;
*/


# ======= 3. Total sales per category.

SELECT p.product_category, ROUND(SUM(pmt.payment_value),2) AS sales
FROM products AS p
INNER JOIN 
order_items AS oi
ON p.product_id = oi.product_id
INNER JOIN payments AS pmt
ON pmt.order_id = oi.order_id
GROUP BY p.product_category
ORDER BY sales DESC;


# ==================== 4. Calculate the percentage of orders that were paid in installments.

WITH temp AS (
	SELECT COUNT(*) AS with_installments
    FROM payments 
    WHERE payment_installments >= 2
    )
SELECT ROUND( (with_installments / (SELECT COUNT(*) FROM payments) ) * 100 , 2) AS perc_of_installments
FROM temp;




# 5. =================== Customers from each state.
SELECT customer_state, COUNT(*) AS count_cust
FROM customers
GROUP BY customer_state;




# =====================================================================================================================
# ================================== Intermediate queries =============================================================


# 1. =================== Number of orders per month in 2018. ===============
SELECT MONTHNAME(order_purchase_timestamp) AS Month, COUNT(*) AS order_count
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY Month
ORDER BY Month;

 # 2. ========== Top 10 Cities with max average number of products per order. ==========**
WITH per_order_count AS (   # No of products/items ordered by each customer
	SELECT orders.order_id, customer_id, COUNT(order_items.order_id) AS order_count
	FROM orders INNER JOIN order_items
	ON orders.order_id = order_items.order_id
	GROUP BY order_id, customer_id
    )
SELECT cust.customer_city, ROUND(AVG(poc.order_count),2) AS Average_Orders
FROM customers AS cust
INNER JOIN per_order_count AS poc
ON cust.customer_id = poc.customer_id
GROUP BY cust.customer_city
ORDER BY Average_Orders DESC
LIMIT 10;


# 3.========= Percentage of total revenue contributed by each product category. ==========
    SELECT UPPER(p.product_category) AS Product_Category, 
    ROUND(SUM(pmt.payment_value)/(SELECT SUM(payment_value) FROM payments) * 100 , 2 ) AS Percentage_Dist
    FROM products AS p
    INNER JOIN 
    order_items AS oi
    ON p.product_id = oi.product_id
    INNER JOIN payments AS pmt
    ON pmt.order_id = oi.order_id
    GROUP BY p.product_category
    ORDER BY Percentage_Dist DESC;



# 4.===================== Correlation between product price and the number of times a product has been purchased.

SELECT p.product_category, 
COUNT(oi.product_id) AS total_orders , ROUND(AVG(oi.price),2) AS Avg_Price   # Finding no of orders & avg price for each catregory
FROM products AS p
INNER JOIN order_items AS oi
ON p.product_id = oi.product_id
GROUP BY p.product_category;


#5.================= Total revenue generated by each seller, and ranking them by revenue.

SELECT *, DENSE_RANK() OVER(order by Revenue DESC) AS Ranking
FROM (
    SELECT oi.seller_id, ROUND(SUM(p.payment_value),2) AS Revenue
	FROM order_items AS oi
	INNER JOIN
	payments AS p
	ON oi.order_id = p.order_id
	GROUP BY oi.seller_id) AS Rev_By_Sellers;





# =====================================================================================================================
# ================================== Advanced queries =============================================================

# 1. =============== Moving average of order values for each customer over their order history. ===**
SELECT customer_id, order_purchase_timestamp, payment_value,
ROUND(AVG(payment_value) OVER( partition by customer_id order by order_purchase_timestamp
								ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),2) AS Running_Avg     # ROWS BETWEEN 2 PRECEDING AND CURRENT ROW -> take avg of last 2 and current row avg for particular customer (otherwise it will take avg of all purchases of part cust & give same value as running avg)
FROM(
	SELECT o.customer_id, o.order_purchase_timestamp, p.payment_value
    FROM orders AS o
    INNER JOIN payments AS p
    ON p.order_id = o.order_id
    ) AS cust_paymnt_details;
    


#  2. ============== Calculate the cumulative sales per month for each year. ===========

SELECT year, month, ROUND(sales,2) As Sales,
ROUND(SUM(sales) OVER(ORDER BY year, month),2) AS Commulative_sales
FROM(
	SELECT YEAR(o.order_purchase_timestamp) AS year,
    MONTH(o.order_purchase_timestamp) AS month, SUM(p.payment_value) AS sales
    FROM orders AS o
    INNER JOIN payments AS p
    ON o.order_id = p.order_id
    GROUP BY year, month
    order by year, month) AS Year_Month_Payment;


# 3. ========== Calculate the year-over-year growth rate of total sales. ============

# ===  FORMULLA:
--          YoY Growth Rate (%) =  Sales_current_year - Sales_Previous_Year / sales_Previous_year   * 100
WITH Yearly_Sales AS (
	SELECT YEAR(o.order_purchase_timestamp) AS year, ROUND(SUM(p.payment_value),2) AS revenue
    FROM orders AS o
    INNER JOIN payments AS p
    on o.order_id = p.order_id
    GROUP BY year
	) 
SELECT year,revenue, 
   ROUND(
   (revenue - LAG(revenue,1) OVER(ORDER BY year) ) / 
   LAG(revenue,1) OVER(ORDER BY year) * 100,
   3) AS YoY_Growth
FROM Yearly_Sales;


# 4. ========== Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.
WITH first_order AS (
    SELECT 
        customer_id,
        MIN(order_purchase_timestamp) AS first_purchase
    FROM orders
    GROUP BY customer_id
),
repeat_orders AS (
    SELECT 
        o.customer_id
    FROM orders o
    JOIN first_order f ON o.customer_id = f.customer_id
    WHERE o.order_purchase_timestamp > f.first_purchase
      AND o.order_purchase_timestamp <= DATE_ADD(f.first_purchase, INTERVAL 6 MONTH)
),
total_customers AS (
    SELECT COUNT(DISTINCT customer_id) AS total FROM first_order
),
retained_customers AS (
    SELECT COUNT(DISTINCT customer_id) AS retained FROM repeat_orders
)
SELECT 
    rc.retained / tc.total * 100 AS retention_rate_percentage
FROM retained_customers rc, total_customers tc;




# 5. ==========5. Identify the top 5 customers who spent the most money in each year.
SELECT years, customer_id, Revenue, Ranking
from (
	SELECT year(orders.order_purchase_timestamp) years, orders.customer_id,
     SUM(payments.payment_value) Revenue,
     DENSE_RANK() OVER(PARTITION BY YEAR(orders.order_purchase_timestamp) ORDER BY SUM(payments.payment_value) DESC) Ranking
     from orders join payments 
     ON payments.order_id = orders.order_id
     GROUP BY years, orders.customer_id) as ranking_cust
where Ranking <= 5 ;
